===============================================================================
Prelude
===============================================================================

The idea is to keep current semantics but augment them with application context.

For example, say we originally had something like:
    read("/etc/passwd")
    read("/etc/shadow")

We could instead have something like (syntax is not important for now):
    #[validate_password]
        read("/etc/passwd")
        read("/etc/shadow")

With the above nesting structure, we can specify that these reads should only
be allowed within the validate_password function.

The following sections will present potential methods for implementing something
like this in eBPF.

===============================================================================
Gatekeeper Counters -- Per-Process
===============================================================================

How this would work (simplified):
    - have our BPF program instrument uprobe and uretprobe on <function>
    - keep track of a counter of how many times we have entered the function
        - very important that this counter is per-task
        - increment counter on function entry
        - decrement on return
        - this allows us to deal (sort of, see below) with things like recusion
    - would need a counter for each function
    - rule checks now involve a check to see whether counter for correspdoning
      function is positive or not

Pros:
    - relatively simple
    - highly compatible with current implementation

Cons:
    - not really realistic to deal with recursion properly
        - with a u8 we can handle 255 calls
        - with a u16 we can handle many more, but then perhaps memory becomes an
          issue
    - potentially memory expensive
        - recall that we need one flag per function
    - hard limit on number of supported gatekeepers
        - struct size needs to be known at compile-time
        - no dynamic memory

===============================================================================

===============================================================================

How this would work (simplified):


Pros:


Cons:


===============================================================================

===============================================================================

How this would work (simplified):


Pros:


Cons:


